####
# This Dockerfile is used in order to build a container that runs the Quarkus application in JVM mode
#
# Before building the container image run:
#
# ./mvnw package
#
# Then, build the image with:
#
# docker build -f src/main/docker/Dockerfile.jvm -t quarkus/vana-logistiek-jvm .
#
# Then run the container using:
#
# docker run -i --rm -p 8080:8080 quarkus/vana-logistiek-jvm
#
###
FROM alpine/openssl AS jwt

RUN mkdir -p /opt/sec \
  && openssl genpkey -out /opt/sec/private-key.pem -algorithm ec -pkeyopt ec_paramgen_curve:secp384r1 \
  && openssl pkey -in /opt/sec/private-key.pem -pubout -out /opt/sec/public-key.pem \
  && echo 'This file contains the keys used to sign the JWTs.' >> /opt/sec/README.md \
  && echo 'To generate your own, run these two commands:' >> /opt/sec/README.md \
  && echo '$ openssl genpkey -out private-key.pem -algorithm ec -pkeyopt ec_paramgen_curve:secp384r1' >> /opt/sec/README.md \
  && echo '$ openssl pkey -in private-key.pem -pubout -out public-key.pem' >> /opt/sec/README.md \
  && chmod 0500 /opt/sec \
  && chmod 0400 /opt/sec/* \
  && chown -R 185 /opt/sec

FROM registry.access.redhat.com/ubi8/openjdk-21:1.20

ENV LANGUAGE='en_US:en'

# We make four distinct layers so if there are application changes the library layers can be re-used
COPY --chown=185 target/quarkus-app/lib/ /deployments/lib/
COPY --chown=185 target/quarkus-app/*.jar /deployments/
COPY --chown=185 target/quarkus-app/app/ /deployments/app/
COPY --chown=185 target/quarkus-app/quarkus/ /deployments/quarkus/

# Add JWT key directory and declare it a volume.
COPY --from=jwt /opt/sec /opt/sec
VOLUME /opt/sec

EXPOSE 8080
USER 185
ENV JAVA_OPTS_APPEND="-Dquarkus.http.host=0.0.0.0 -Dquarkus.http.port=8080 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
ENV JAVA_APP_JAR="/deployments/quarkus-run.jar"

HEALTHCHECK --interval=5m --timeout=3s \
  CMD curl -f -o /dev/null http://localhost:8080/q/health || exit 1

ENTRYPOINT [ "/opt/jboss/container/java/run/run-java.sh" ]
